* Bump to 2018 where appropriate.
* Brush_field: Rename "width" => "columns" and "height" => "rows" for
  the geometry of the tiles grid.  Purpose of this change is to
  avoid confusion with the playing field widget's pixel width and
  height.
* Add version info in config.xml and verify it when parsing it.
* All symbols should always have an id.  Anonymous symbols should
  automatically get a generated id.  That way, code may be
  simplified (no null-check in destructor and to_string();
  but assert non-null in constructor), and symbols can always
  be uniquely identified by their id.
* FIXME: Possible performance / memory usage issue:
  fractals-factory.cc: Fractal pixmaps are cached by the factory to
  avoid multiple recomputation, but Qt probably creates copies of the
  same pixmap over and over again when calling "QBrush
  result(*_cached_pixmap);"?
* FIXME: Minor memory leak: Instances of IBrush_factory are not
  cleanly deleted when no more used.
* Support Julia set fractals.
* Classes Brush_factory_symbols, Shape_symbols and Tile_symbols (and
  possibly even more symbol table classes to come) should derive from
  an abstract Symbol_table class and thus avoid code duplication.
* Make parser fully static.
* Check: Shape_terms is not always a constant...
* FIXME: Maze_config::load_shape() returns either a definition or a
  resolved reference, but the caller always assumes a definition
  (and tries to add it to the shape symbol definitions table).
  Solution: A reference should have no symbol id, and the caller
  can deploy this assumption for an appropriate check.
* Make it possible to define shapes outside of tiles, such that the
  same shape can be referenced from multiple tiles (with display
  offsets x and y), rather than having to redefine the shape over and
  over again.  Useful for shapes that are that large that they cover
  multiple tiles.
* Extend supported implicit curve syntax, e.g. expressions like:
  (x + y)Â² - 1
* Turn config compiler from current one-pass technique into a true
  muli-pass compiler with AST based visitor pattern for reference
  resolution.  Benefit: Get rid of the current limitation that
  references may only refer to delcrations that have already been
  passed.
* Optimize shape expressions in terms of evaluation performance cost.
  Obvious optimization is elimination of duplicate negations:
  not(not(x)) = x.  Note that conjuctive / disjunctive normal form
  typically is *not* optimal in terms of evaluation cost.  Instead,
  minimization based on prime implicants should be the right way
  (e.g. Quine-McCluskey algorithm).
* Limit velocity, such that ball moves at most 1 pixel per time step.
* Overhoul concept when passing position (x, y) as double or integer.
* Move velocity correction code from class Balls to class Ball.
* Create template class for handling matrices.
* Consider geometry of holes.
* Create window icon / splash screen programmatically.
* Enhance accurateness of collision detection.
* Enhance accurateness of reflection and frictional resistance.
* Create sound output.
* Support perspective drawing of walls.
* Support multiple levels.
* Support multiple games.
* Create fast booting framework, maybe something similar to BerryBoot.
