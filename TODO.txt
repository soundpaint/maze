* <alias-char> not beneath <block>, but beneath <field> with reference
  to block id:

  <field>
    <alias-char ref="wall-rounded-lower-right">J</alias-char>
    ...
  </field>

* Make it possible to define shapes outside of blocks, such that the
  same shape can be referenced from multiple blocks (with display
  offsets x and y), rather than having to redefine the shape over and
  over again.  Useful for shapes that are that large that they cover
  multiple blocks.

* Make global <background> work as fall-back when no <background> is
  specified in a block.  Same for <foreground>.
* Extend supported implicit curve syntax, e.g. expressions like:
  (x + y)Â² - 1
* Optimize shape expressions in terms of evaluation performance cost.
  Obvious optimization is elimination of duplicate negations:
  not(not(x)) = x.  Note that conjuctive / disjunctive normal form
  typically is *not* optimal in terms of evaluation cost.  Instead,
  minimization based on prime implicants should be the right way
  (e.g. Quine-McCluskey algorithm).
* Limit velocity, such that ball moves at most 1 pixel per time step.
* Overhoul concept when passing position (x, y) as double or integer.
* Move velocity correction code from class Balls to class Ball.
* Create template class for handling matrices.
* Consider geometry of holes.
* Create window icon / splash screen programmatically.
* Enhance accurateness of collision detection.
* Enhance accurateness of reflection and frictional resistance.
* Create sound output.
* Support perspective drawing of walls.
* Support multiple levels.
* Support multiple games.
* Create fast booting framework, maybe something similar to BerryBoot.

Done:
* Complete 1st version of collision detection.
* Let ball geometry support left/right and up/down extension.
* Fix memory leaks when using Point_3D.
* Consider geometry of balls.
